<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework.Toolkit</name>
    </assembly>
    <members>
        <member name="T:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1">
            <summary>
                AuditDbContextBase adds auditing capabilities to the DbContextBase.
                Auditing is enabled by default but may be disabled (AuditEnabled=false) if needed.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.#ctor">
            <summary>
                Empty constructor is used for 'update-database' command-line command.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.#ctor(System.String,System.Data.Entity.IDatabaseInitializer{`0})">
            <summary>
                Initializes a new instance of the AuditDbContext class
                using the given string as the name or connection string
                for the database to which a connection will be made.
            </summary>
            <param name="nameOrConnectionString">Either the database name or the connection string.</param>
        </member>
        <member name="M:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.ConfigureAuditingFromAppConfig">
            <summary>
                Initializes static members of the AuditDbContext class.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.AuditEnabled">
            <inheritdoc />
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.AuditDateTimeKind">
            <inheritdoc />
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.Proxies">
            <summary>
                Gets a value indicating whether this context is using proxies.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.RegisterAuditType(EntityFramework.Toolkit.Auditing.AuditTypeInfo)">
            <summary>
                Registers and type for auditing.
            </summary>
            <param name="auditTypeInfo"></param>
        </member>
        <member name="M:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.Reload(System.Object)">
            <summary>
                Reloads the entity from the database overwriting any property values with values from the database.
                The entity will be in the Unchanged state after calling this method.
            </summary>
            <param name="entity">The entity object to reload.</param>
        </member>
        <member name="M:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.SaveChanges">
            <summary>
                Saves all changes made in this context to the underlying database
                using the current windows user for auditing.
            </summary>
            <returns>The number of objects written to the underlying database.</returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Auditing.AuditDbContextBase`1.SaveChanges(System.String)">
            <summary>
                Saves all changes made in this context to the underlying database
                using the user paramater passed for auditing.
            </summary>
            <param name="username">User name for auditing.</param>
            <returns>The number of objects written to the underlying database.</returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Auditing.AuditTypeInfo.#ctor(System.Type,System.Type)">
            <summary>
                Initializes a new instance of the AuditTypeInfo class.
                <param name="auditableEntityType">Type to audit, must implement IAuditableEntity.</param>
                <param name="auditEntityType">Type of audit entity, must implement IAuditEntity.</param>
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.ConfigFile.AuditConfigurationSection.AuditEnabled">
            <summary>
                Turns auditing on (=<code>true</code>) or off (=<code>false</code>). Default=<code>true</code>.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.ConfigFile.AuditConfigurationSection.AuditDateTimeKind">
            <summary>
                Defines the <code>DateTimeKind</code> used for auditing.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.Concurrency.IConcurrencyResolveStrategy.ResolveConcurrencyException(System.Object,System.Object)">
            <summary>
            Resolves a concurrency conflict catched in <see cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException"/>.
            If <code>null</code> is returned, the default strategy <see cref="T:EntityFramework.Toolkit.Concurrency.RethrowConcurrencyResolveStrategy"/> is applied.
            </summary>
            <param name="conflictingEntity">The object which caused the save conflict.</param>
            <param name="databaseEntity">The object which is already present in the database.</param>
            <returns></returns>
        </member>
        <member name="T:EntityFramework.Toolkit.Concurrency.RethrowConcurrencyResolveStrategy">
            <summary>
            Rethrow strategy throws an <see cref="T:EntityFramework.Toolkit.Exceptions.UpdateConcurrencyException"/> in case of a conflicting update.
            </summary>
        </member>
        <member name="T:EntityFramework.Toolkit.DataSeedBase`1">
            <summary>
                Provides a template for generic seed implementors.
            </summary>
            <typeparam name="TEntity">The entity type for which the implementor provides a seed.</typeparam>
        </member>
        <member name="M:EntityFramework.Toolkit.DataSeedBase`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:EntityFramework.Toolkit.DataSeedBase`1" /> class.
            </summary>
        </member>
        <member name="T:EntityFramework.Toolkit.DataSeedBase`1.ExpressionReplacer">
            <summary>
                Source:
                http://stackoverflow.com/questions/26253321/convert-expressionfunct-tproperty-to-expressionfuncobject-object-and-v
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.#ctor">
            <summary>
                Empty constructor is used for 'update-database' command-line command.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.DbContextBase`1.Name">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.DbSet``1">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.ResetDatabase">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.DropDatabase">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.Edit``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.Edit``1(``0,``0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.Delete``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.UndoChanges``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.ModifyProperties``1(``0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.LoadReferenced``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.SaveChanges">
            <inheritdoc />
        </member>
        <member name="P:EntityFramework.Toolkit.DbContextBase`1.ConcurrencyResolveStrategy">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.GetChangeSet">
            <summary>
                Determins the changes that are transfered to the persistence layer.
            </summary>
            <returns>ChangeSet.</returns>
        </member>
        <member name="P:EntityFramework.Toolkit.DbContextBase`1.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.DbContextBase`1.Dispose(System.Boolean)">
            <inheritdoc />
            :
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.AddOrUpdate``1(System.Data.Entity.DbContext,``0)">
            <summary>
                Adds an entity (if newly created) or update (if has non-default Id).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The db context.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
            <remarks>
                Will not work for HasDatabaseGeneratedOption(DatabaseGeneratedOption.None).
                Will not work for composite keys.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.IsTransient``1(System.Data.Entity.DbContext,``0)">
            <summary>
                Determines whether the specified entity is newly created (Id not specified).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <param name="entity">The entity.</param>
            <returns>
                <c>true</c> if the specified entity is transient; otherwise, <c>false</c>.
            </returns>
            <remarks>
                Will not work for HasDatabaseGeneratedOption(DatabaseGeneratedOption.None).
                Will not work for composite keys.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.Load``1(System.Data.Entity.DbContext,System.Object)">
            <summary>
                Loads a stub entity (or actual entity if already loaded).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <param name="id">The id.</param>
            <returns></returns>
            <remarks>
                Will not work for composite keys.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.IsLoaded``1(System.Data.Entity.DbContext,System.Object)">
            <summary>
                Determines whether the specified entity is loaded from the database.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <param name="id">The id.</param>
            <returns>
                <c>true</c> if the specified entity is loaded; otherwise, <c>false</c>.
            </returns>
            <remarks>
                Will not work for composite keys.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.MarkReferencesUnchanged``1(System.Data.Entity.DbContext,``0)">
            <summary>
                Marks the reference navigation properties unchanged.
                Use when adding a new entity whose references are known to be unchanged.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.Merge``1(System.Data.Entity.DbContext,``0)">
            <summary>
                Merges a DTO into a new or existing entity attached/added to context
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <param name="dataTransferObject">
                The data transfer object. It must have a primary key property of the same name and
                type as the actual entity.
            </param>
            <returns></returns>
            <remarks>
                Will not work for composite keys.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.GetPrimaryKeyFor``1(System.Data.Entity.DbContext)">
            <summary>
            Returns the primary key <see cref="T:System.Reflection.PropertyInfo"/> for a given type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="context">The context in which the given entity type lives.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EntityFramework.Toolkit.Extensions.DbContextExtensions.GetPrimaryKeyForEntity``1(System.Data.Entity.DbContext,``0)" -->
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.AutoConfigure(System.Data.Entity.DbContext,System.Data.Entity.DbModelBuilder,System.Reflection.Assembly)">
            <summary>
            Scans the assembly in which the given <paramref name="context"/> lives for all
            implementations of <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1"/> and 
            configures them using the given <paramref name="modelBuilder"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="modelBuilder">The model builder used to configure the EntityTypeConfigurations.</param>
            <param name="targetAssembly">The assembly which contains the EntityTypeConfigurations.</param>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.GetNavigationProperties(System.Data.Entity.DbContext,System.Type)">
            <summary>
            Returns all navigation properties of the given <paramref name="entityType"/>.
            </summary>
            <param name="context">The context in which the <paramref name="entityType"/> lives.</param>
            <param name="entityType">The entity type for which this method returns the navigation properties.</param>
            <returns>A list of navigation properties.</returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.GetNavigationProperties``1(System.Data.Entity.DbContext)">
            <summary>
            Returns all navigation properties of the given <typeparamref name="TEntityType"/>.
            </summary>
            <param name="context">The context in which the <typeparamref name="TEntityType"/> lives.</param>
            <returns>A list of navigation properties.</returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbContextExtensions.GetTableRowCounts(System.Data.Entity.DbContext)">
            <summary>
            Returns the number of table rows per database table.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbEntityEntryExtensions.Property``1(System.Data.Entity.Infrastructure.DbEntityEntry,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <param name="entry"></param>
            <param name="property">The property.</param>
            <returns> An object representing the property. </returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.DbUpdateExceptionFormatter.IsValidSqlServerDatetime(System.DateTime)">
            <summary>
                Checks if <paramref name="dateTime" /> is between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM.
            </summary>
            <remarks>
                SQL Server defines two different datetime formats:
                The datetime datatype is capable of storing dates in the range 1753-01-01 to 9999-12-31.
                The datetime2 datatype was introduced in SQL Server 2008. The range of dates that it is capable of storing is
                0001-01-01 to 9999-12-31.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.MappingExtensions.Unique``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
                Marks the properties in <paramref name="propertyExpressions" /> as unique.
                The index name is composed of all property names, e.g. UQ_PropertyA_PropertyB.
            </summary>
            <remarks>
                Note: If the unique property is of type string, you have to set the MaxLength.
            </remarks>
            <param name="config">The affected EntityTypeConfiguration."/></param>
            <param name="propertyExpressions">The properties which are unique together.</param>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.MappingExtensions.Unique``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
                Marks the properties in <paramref name="propertyExpressions" /> as unique.
            </summary>
            <remarks>
                Note: If the unique property is of type string, you have to set the MaxLength.
            </remarks>
            <param name="config">The affected EntityTypeConfiguration."/></param>
            <param name="indexName">The index name.</param>
            <param name="propertyExpressions">The properties which are unique together.</param>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.MappingExtensions.IsUnique(System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration,System.String,System.Int32)">
            <summary>
                Marks the <paramref name="property" /> as unique.
            </summary>
            <remarks>
                Note: If the unique property is of type string, you have to set the MaxLength.
            </remarks>
            <param name="property">The property instance.</param>
            <param name="indexName">The name of the database index. Default is "UQ_Default" if not defined.</param>
            <param name="columnOrder">The column order of the index. Default is 0 if not defined.</param>
            <returns></returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.MappingExtensions.HasIndex(System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration,System.String,System.Boolean,System.Int32)">
            <summary>
                Applies an index to <paramref name="property" />.
            </summary>
            <remarks>
                Note: If the indexed property is of type string, you have to set the MaxLength.
            </remarks>
            <param name="property">The property instance.</param>
            <param name="indexName">The name of the database index. Default is "IX_Default" if not defined.</param>
            <param name="isUnique">
                Set this property to true to define a unique index. Set this property to false to define a
                non-unique index.
            </param>
            <param name="columnOrder">The column order of the index. Default is 0 if not defined.</param>
            <returns></returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
                Includes navigation properties.
            </summary>
            <typeparam name="T">Generic type T.</typeparam>
            <param name="queryable">Queryable</param>
            <param name="properties">A list of navigation properties to include.</param>
            <returns>New queryable which includes the given navigation properties.</returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Includes navigation properties.
            </summary>
            <typeparam name="T">Generic type T.</typeparam>
            <typeparam name="TProperty">Generic property type TProperty.</typeparam>
            <param name="queryable">Queryable</param>
            <param name="pathExpression">The navigation property to include.</param>
            <returns>New queryable which includes the given navigation properties.</returns>
        </member>
        <member name="M:EntityFramework.Toolkit.TypeExtensions.GetEntityType(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>
                Gets the raw entity type without dynamic proxy type.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.TypeExtensions.As``1(System.Object)">
            <summary>
                Safely casts the specified object to the type specified through <typeparamref name="TTo" />.
            </summary>
            <remarks>
                Has been introduced to allow casting objects without breaking the fluent API.
            </remarks>
            <typeparam name="TTo"></typeparam>
        </member>
        <member name="M:EntityFramework.Toolkit.TypeExtensions.GetMatchingConstructor(System.Type,System.Object[])">
            <summary>
                Finds the best matching constructor for given type <paramref name="type" />.
            </summary>
        </member>
        <member name="T:EntityFramework.Toolkit.GenericRepository`1">
            <summary>
                Implementation of a generic repository.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.#ctor(EntityFramework.Toolkit.IDbContext)">
            <summary>
                Initializes a new instance of the <see cref="T:EntityFramework.Toolkit.GenericRepository`1" /> class.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.GenericRepository`1.Context">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Get">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Query">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.GetAll">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.FindById(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.FindBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Add``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.AddOrUpdate(`0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Update(`0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Update(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Update``1(``0,``0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.UpdateProperties``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.UpdateProperty``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.LoadReferenced``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.GenericRepository`1.Save">
            <inheritdoc />
        </member>
        <member name="P:EntityFramework.Toolkit.IDbContext.Name">
            <summary>
            The name of this EntityFramework context.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IDbContext.Set``1">
            <summary>
            The generic DbSet of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Testing.ConnectionStringGenerator.RandomizeDatabaseName(System.String,System.Int32,System.String)">
            <summary>
            Adds a random number to the given <param name="connectionString">connectionString</param> parameter.
            </summary>
            <param name="connectionString">The original connection string.</param>
            <param name="randomTokenLength">The length of the generated random number.</param>
            <param name="prefix">A prefix attach between database name and random token.</param>
            <returns></returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Testing.ConnectionStringGenerator.GetRandomToken(System.Int32)">
            <summary>
            Generates a random upper-invariant string of <paramref name="randomTokenLength"/>.
            </summary>
            <param name="randomTokenLength"></param>
            <returns></returns>
        </member>
        <member name="T:EntityFramework.Toolkit.Testing.ContextTestBase`2">
            <summary>
            ContextTestBase for context <typeparam name="TContext"/> using IDbConnection <typeparam name="TDbConnection"/>
            </summary>
            <typeparam name="TContext">The database context.</typeparam>
            <typeparam name="TDbConnection">The database connection.</typeparam>
        </member>
        <member name="M:EntityFramework.Toolkit.Testing.ContextTestBase`1.#ctor(System.Func{EntityFramework.Toolkit.IDbConnection},System.Data.Entity.IDatabaseInitializer{`0},System.Action{System.String},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:EntityFramework.Toolkit.Testing.ContextTestBase`1" /> class.
            </summary>
            <param name="dbConnection">The <see cref="T:EntityFramework.Toolkit.IDbConnection" /> which is used to connect to the database.</param>
            <param name="log">Log delegate used to write diagnostic log messages to.</param>
            <param name="databaseInitializer">
                The <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> which is used initialize the
                database. (Default is <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />).
            </param>
            <param name="deleteDatabaseOnDispose">Determines if the database needs to be deleted on dispose. (Default is true).</param>
        </member>
        <member name="M:EntityFramework.Toolkit.Testing.ContextTestBase`1.EnsureDatabaseInitializer(System.Data.Entity.IDatabaseInitializer{`0})">
            <summary>
                Returns the default database initializer (given by ctor) if <paramref name="databaseInitializer" /> is null.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.Testing.ContextTestBase`1.EnsureDbConnection(EntityFramework.Toolkit.IDbConnection)">
            <summary>
                Returns the default db connection (given by ctor) if <paramref name="dbConnection" /> is null.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.UnitOfWork.Commit">
            <inheritdoc />
        </member>
        <member name="M:EntityFramework.Toolkit.UnitOfWork.Dispose">
            <inheritdoc />
        </member>
    </members>
</doc>
