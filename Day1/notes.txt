Types of Application Architectures : 
_____________________________________

 There are 3 types of applicatoin architectures known as 

	1) Single Tier 

	2) Two Tier 

	3) Three Tier 

Each application architecture contains 3 layers known as 

1) User Services : Presentation layer.

2) Business Services : In the data any business operations or logical calculations

3) Data Services : Which is used to store data (data store)

*** In Single Tier architecture one single executable file handles all these operations, so single tier architecture applicaitons are called monolythic applications ***


In Two-Tier architecture, combination of 2 layers will be there in one applicaiton, and another layer will be there in another application, so we can implement applications by using 

1) Client : {User Services + Business Services} + {Data Services}

2) Server : {User Services} + {Business Services + Data Services} 

These two layers will be resided in a single system or different systems. 

In Three-Tier architecture, all these 3 layers resides separately in a single system or different systems and performs job as a single unit. 


What is .NET Framework 
_______________________

1) Microsoft introduced .NET for bridging the gap between interoperability between applications. 

2) It is a foundation on which where we can build, design, develop and deploy the applicaitons. 

3) Provides high productive, performance oriented and multi-language environment for integrating existing applicaitons with next-generation applicaions. 

4) Ability to handle the challenges to deploy the given application in various OS. 

5) It contains more than 250+ language characterstics have been formed as a single group, where we can use one language features within another language. 

Namespaces :

Contains group of related classes and interfaces that which belongs to one common group. If you want to overcome the naming conflicts between classes then we need the help of Namespaces. 

Components of .NET Framework 
_______________________________


1) CLR (Common Language at Runtime) 

  it is responsible for 

	a) Debugging

	b) Executing Code 

	c) Memory Management

	d) Garbage Collection 

	e) Error Handling 

	f) Security (Code Access Security)

	h) Versoin Support 

Any language said to be .NET framework language, if it satisfies all the rules/regulations that which are implemented by CLR. 

Managed Code : The code that which targets CLR known as managed code.

Unmanaged Code : The code that which does not target CLR known as Unamanged Code. 

Common Intermediate Language(CIL)

Microsoft Intermediate Language (MSIL) : When you compile any .NET application, at first instead of converting that into CPU specific code, first it is converted into MSIL. Then it becomes language neutral. That time either .exe or .dll file will be created. 

Compiling and Executing Procedure of .NET Framework ___________________________________________________

1) When You compile any .NET application, instead of converting into CPU specific code, first it is converted into MSIL. 

	either .exe or .dll file will be created. 

2) Then it would be send to class loader. 

  There are 2 types of class loaders known as 

	a) Primordial class Loader : used to load all system classes which are required to run the program.

	b) Class Loader Objects : Used to load all custom classes which are required to run the program. 

3) In class loader, JIT Compiler(Just-In Time) Converts CIL into CPU specific Code. 

4) Then it would be send to execution manager, which contains QUEUE of programs, which are ready to run, where we can execute the program. 

*** Before execution it needs to undergone the security authentication ***

Object Oriented Programming : 
______________________________

It is an approach that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and objects, which are to be used as templates for creating copies of such modules on demand. 

Object : An object is a real world entity, that which possess 3 characterstics known as 

	1) State

	2) Behaviour

	3) Identity 

OOPS features : 
_______________

   1) Encapsulation : Wrapping up of data and functions into a single unit known as encapsulation. 

   2) Abstraction : Hiding the irrelevant details of an object, that do not contribute to its essential characterstics. 

   3) Inheritance : Deriving a new entity from already existing entity. 

   4) Polymorphism : The ability to take more than one form known as Polymorphism. 

class : A class is a template or blueprint, that which contains combination of data members and member functions. Members of the class can be accessable by using the instance of the class. 

System is the default namespace in .NET, we have to import in the program as 

using System;

You can define main() in C# as

static void Main(String[] args)
{
  ...
  ...
}

Console.WriteLine() : Used to display any value or message. 

Console.WriteLine("Welcome to C#");

Data Types :
_____________

There are 2 types of data types as 

1) value types : int, float, double, char, bool etc...

2) reference types : String, Object and Custom Type. 



Console.ReadLine() :used to read data from the keyboard. It reads the data in string format. 

Access Specifiers : 
____________________

1) private : Allows you to access members within the current class. 

2) public  : Allows you to access members in entire application.

3) protected : Allows you to access members within current/derived classes. 

4) internal : Allows you to access members in all classes of current namespace. 

5) protected internal : Allows you to access members in all classes of current namespace and other namespace derived classes. 

*** protected/internal protected will be discussed after inheritanace topic ***

You can define a method, as

acess-specifier return-type method_Name(pars...) {
}

public void show() {
...
...
}

public int sum() {
 ..
 ..
}

You can create an object to the class as 

class_name obj=new class_name();

Control Structures : Used to define the flow of the program. 

There are 2 types of control structures known as 

1) Branching 

   if...else : Used to execute the statements based on the condition. 
	
	if(condition)
	{
	   statement(s);
	}
	else 
	{
	  statement(s);
	}

2) Looping 






















































































































































































































































































